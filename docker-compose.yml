version: "3.9"

# no-new-privileges:true : cette option empêche les conteneurs de changer de privilèges une fois qu'ils ont été démarrés. 
#   Elle est utilisée pour empêcher les processus dans le conteneur de bénéficier de privilèges supplémentaires, 
#   tels que l'accès au noyau ou l'escalade de privilèges. Lorsque cette option est définie sur true, 
#   le conteneur ne peut pas acquérir de nouveaux privilèges.

# seccomp:unconfined : cette option désactive le filtrage des appels système Linux en utilisant Seccomp. 
#   Seccomp est une fonctionnalité de sécurité Linux qui permet de restreindre les appels système qu'un processus peut effectuer. 
#   Lorsque cette option est définie sur unconfined, le conteneur est autorisé à effectuer tous les appels système.

# Les fichiers .env sont stockés en clair sur le système de fichiers de la machine hôte et peuvent donc être facilement accessibles à toute personne ayant accès à la machine. Les secrets de Docker Compose, en revanche, sont stockés de manière cryptée dans le store à secrets de Docker, qui est protégé par des mécanismes de sécurité.

# De plus, l'utilisation de secrets dans Docker Compose vous permet de séparer les informations sensibles de votre code et de les gérer séparément. Cela peut rendre plus facile la gestion de la sécurité des secrets et la mise à jour de ces derniers. Enfin, Docker Compose vous permet de définir des politiques de contrôle d'accès pour les secrets, de sorte que seules les personnes autorisées puissent y accéder.

# When you deploy, Docker mounts a file under /run/secrets/<secret_name> in the services. These files are never persisted in disk, but are managed in memory.

# Each service uses environment variables to specify where the service should look for that secret data.

secrets:
  token_key:
    file: ./token_key.txt

services:
  mongo:
    image: mongo:latest
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    # ports:
    #   - "27017:27017"
    volumes:
      - ./data/db:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/ --quiet
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s

  discord_api:
    build: ./api
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    environment:
      MONGO_URL: "mongodb://root:root@mongo:27017"
    # Pour le dev 
    # ports:
    #   - "3000:3000"
    depends_on:
      mongo:
        condition: service_healthy
    healthcheck:
      test: curl -f http://localhost:3000/health || exit 1
      interval: 5s
      timeout: 20s
      retries: 1

  discord_bot:
    build: ./bot
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    secrets:
      - token_key
    environment:
      TOKEN_FILE: /run/secrets/token_key
      API_URL: "http://discord_api:3000"
    
    depends_on:
      discord_api:
        condition: service_healthy
    healthcheck:
      test: curl -f http://localhost:3000/health || exit 1
      interval: 5s
      timeout: 10s
      retries: 1

  discord_web:
    build: ./web
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    environment:
      API_URL: "http://discord_api:3000"
    ports:
      - "3001:3000"
    depends_on:
      discord_api:
        condition: service_healthy
    healthcheck:
      test: curl -f http://localhost:3000/health || exit 1
      interval: 5s
      timeout: 10s
      retries: 1

